// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package provider

import (
	"sync"
)

// Ensure, that ListMock does implement List.
// If this is not the case, regenerate this file with moq.
var _ List = &ListMock{}

// ListMock is a mock implementation of List.
//
//	func TestSomethingThatUsesList(t *testing.T) {
//
//		// make and configure a mocked List
//		mockedList := &ListMock{
//			GetFunc: func(key string) (Provider, error) {
//				panic("mock out the Get method")
//			},
//			GetAllIDFunc: func() []string {
//				panic("mock out the GetAllID method")
//			},
//			RegisterFunc: func(p Provider) error {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedList in code that requires List
//		// and then make assertions.
//
//	}
type ListMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) (Provider, error)

	// GetAllIDFunc mocks the GetAllID method.
	GetAllIDFunc func() []string

	// RegisterFunc mocks the Register method.
	RegisterFunc func(p Provider) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// GetAllID holds details about calls to the GetAllID method.
		GetAllID []struct {
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// P is the p argument value.
			P Provider
		}
	}
	lockGet      sync.RWMutex
	lockGetAllID sync.RWMutex
	lockRegister sync.RWMutex
}

// Get calls GetFunc.
func (mock *ListMock) Get(key string) (Provider, error) {
	if mock.GetFunc == nil {
		panic("ListMock.GetFunc: method is nil but List.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedList.GetCalls())
func (mock *ListMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetAllID calls GetAllIDFunc.
func (mock *ListMock) GetAllID() []string {
	if mock.GetAllIDFunc == nil {
		panic("ListMock.GetAllIDFunc: method is nil but List.GetAllID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllID.Lock()
	mock.calls.GetAllID = append(mock.calls.GetAllID, callInfo)
	mock.lockGetAllID.Unlock()
	return mock.GetAllIDFunc()
}

// GetAllIDCalls gets all the calls that were made to GetAllID.
// Check the length with:
//
//	len(mockedList.GetAllIDCalls())
func (mock *ListMock) GetAllIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllID.RLock()
	calls = mock.calls.GetAllID
	mock.lockGetAllID.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *ListMock) Register(p Provider) error {
	if mock.RegisterFunc == nil {
		panic("ListMock.RegisterFunc: method is nil but List.Register was just called")
	}
	callInfo := struct {
		P Provider
	}{
		P: p,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(p)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedList.RegisterCalls())
func (mock *ListMock) RegisterCalls() []struct {
	P Provider
} {
	var calls []struct {
		P Provider
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

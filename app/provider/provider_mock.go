// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package provider

import (
	"net/http"
	"sync"

	"github.com/superboomer/maptile/app/tile"
)

// Ensure, that ProviderMock does implement Provider.
// If this is not the case, regenerate this file with moq.
var _ Provider = &ProviderMock{}

// ProviderMock is a mock implementation of Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked Provider
//		mockedProvider := &ProviderMock{
//			GetRequestFunc: func(t *tile.Tile) *http.Request {
//				panic("mock out the GetRequest method")
//			},
//			GetTileFunc: func(lat float64, long float64, scale float64) tile.Tile {
//				panic("mock out the GetTile method")
//			},
//			IDFunc: func() string {
//				panic("mock out the ID method")
//			},
//			MaxJobsFunc: func() int {
//				panic("mock out the MaxJobs method")
//			},
//			MaxZoomFunc: func() int {
//				panic("mock out the MaxZoom method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedProvider in code that requires Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// GetRequestFunc mocks the GetRequest method.
	GetRequestFunc func(t *tile.Tile) *http.Request

	// GetTileFunc mocks the GetTile method.
	GetTileFunc func(lat float64, long float64, scale float64) tile.Tile

	// IDFunc mocks the ID method.
	IDFunc func() string

	// MaxJobsFunc mocks the MaxJobs method.
	MaxJobsFunc func() int

	// MaxZoomFunc mocks the MaxZoom method.
	MaxZoomFunc func() int

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetRequest holds details about calls to the GetRequest method.
		GetRequest []struct {
			// T is the t argument value.
			T *tile.Tile
		}
		// GetTile holds details about calls to the GetTile method.
		GetTile []struct {
			// Lat is the lat argument value.
			Lat float64
			// Long is the long argument value.
			Long float64
			// Scale is the scale argument value.
			Scale float64
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// MaxJobs holds details about calls to the MaxJobs method.
		MaxJobs []struct {
		}
		// MaxZoom holds details about calls to the MaxZoom method.
		MaxZoom []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockGetRequest sync.RWMutex
	lockGetTile    sync.RWMutex
	lockID         sync.RWMutex
	lockMaxJobs    sync.RWMutex
	lockMaxZoom    sync.RWMutex
	lockName       sync.RWMutex
}

// GetRequest calls GetRequestFunc.
func (mock *ProviderMock) GetRequest(t *tile.Tile) *http.Request {
	if mock.GetRequestFunc == nil {
		panic("ProviderMock.GetRequestFunc: method is nil but Provider.GetRequest was just called")
	}
	callInfo := struct {
		T *tile.Tile
	}{
		T: t,
	}
	mock.lockGetRequest.Lock()
	mock.calls.GetRequest = append(mock.calls.GetRequest, callInfo)
	mock.lockGetRequest.Unlock()
	return mock.GetRequestFunc(t)
}

// GetRequestCalls gets all the calls that were made to GetRequest.
// Check the length with:
//
//	len(mockedProvider.GetRequestCalls())
func (mock *ProviderMock) GetRequestCalls() []struct {
	T *tile.Tile
} {
	var calls []struct {
		T *tile.Tile
	}
	mock.lockGetRequest.RLock()
	calls = mock.calls.GetRequest
	mock.lockGetRequest.RUnlock()
	return calls
}

// GetTile calls GetTileFunc.
func (mock *ProviderMock) GetTile(lat float64, long float64, scale float64) tile.Tile {
	if mock.GetTileFunc == nil {
		panic("ProviderMock.GetTileFunc: method is nil but Provider.GetTile was just called")
	}
	callInfo := struct {
		Lat   float64
		Long  float64
		Scale float64
	}{
		Lat:   lat,
		Long:  long,
		Scale: scale,
	}
	mock.lockGetTile.Lock()
	mock.calls.GetTile = append(mock.calls.GetTile, callInfo)
	mock.lockGetTile.Unlock()
	return mock.GetTileFunc(lat, long, scale)
}

// GetTileCalls gets all the calls that were made to GetTile.
// Check the length with:
//
//	len(mockedProvider.GetTileCalls())
func (mock *ProviderMock) GetTileCalls() []struct {
	Lat   float64
	Long  float64
	Scale float64
} {
	var calls []struct {
		Lat   float64
		Long  float64
		Scale float64
	}
	mock.lockGetTile.RLock()
	calls = mock.calls.GetTile
	mock.lockGetTile.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *ProviderMock) ID() string {
	if mock.IDFunc == nil {
		panic("ProviderMock.IDFunc: method is nil but Provider.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedProvider.IDCalls())
func (mock *ProviderMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// MaxJobs calls MaxJobsFunc.
func (mock *ProviderMock) MaxJobs() int {
	if mock.MaxJobsFunc == nil {
		panic("ProviderMock.MaxJobsFunc: method is nil but Provider.MaxJobs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMaxJobs.Lock()
	mock.calls.MaxJobs = append(mock.calls.MaxJobs, callInfo)
	mock.lockMaxJobs.Unlock()
	return mock.MaxJobsFunc()
}

// MaxJobsCalls gets all the calls that were made to MaxJobs.
// Check the length with:
//
//	len(mockedProvider.MaxJobsCalls())
func (mock *ProviderMock) MaxJobsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMaxJobs.RLock()
	calls = mock.calls.MaxJobs
	mock.lockMaxJobs.RUnlock()
	return calls
}

// MaxZoom calls MaxZoomFunc.
func (mock *ProviderMock) MaxZoom() int {
	if mock.MaxZoomFunc == nil {
		panic("ProviderMock.MaxZoomFunc: method is nil but Provider.MaxZoom was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMaxZoom.Lock()
	mock.calls.MaxZoom = append(mock.calls.MaxZoom, callInfo)
	mock.lockMaxZoom.Unlock()
	return mock.MaxZoomFunc()
}

// MaxZoomCalls gets all the calls that were made to MaxZoom.
// Check the length with:
//
//	len(mockedProvider.MaxZoomCalls())
func (mock *ProviderMock) MaxZoomCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMaxZoom.RLock()
	calls = mock.calls.MaxZoom
	mock.lockMaxZoom.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ProviderMock) Name() string {
	if mock.NameFunc == nil {
		panic("ProviderMock.NameFunc: method is nil but Provider.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedProvider.NameCalls())
func (mock *ProviderMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}
